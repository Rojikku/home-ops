---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 46.4.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    fullnameOverride: prometheus
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
          - name: "null" # quote
          - name: "pagerduty"
            pagerduty_configs:
              - service_key: "${PAGERDUTY_INTEGRATION_KEY}"
          - name: "discord"
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}

                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
          # - name: "nodered"
          #   webhook_configs:
          #     - url: "http://node-red.home:1880/power-outage"
          #       send_resolved: true
        route:
          group_by: ["alertname", "job"]
          group_wait: 1m
          group_interval: 10m
          repeat_interval: 12h
          receiver: "pagerduty"
          routes:
            - receiver: "null"
              match:
                alertname: Watchdog
            - receiver: "null"
              match:
                service: sonarr-metrics
            - receiver: "null"
              match:
                alertname: InfoInhibitor
            - receiver: "null"
              match:
                alertname: CephNodeNetworkPacketDrops
            - receiver: "discord"
              match_re:
                severity: critical
              continue: true
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Alert Man"
          hajimari.io/icon: "alarm-bell"
          hajimari.io/instance: "monitor"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: networking-authentik@kubernetescrd
        hosts:
          - &host "alertman.mon.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - *host
            secretName: "alertman-tls"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "ceph-block"
              resources:
                requests:
                  storage: 1Gi
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    coreDns:
      enabled: true
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
      service:
        enabled: true
        port: 10257
        targetPort: 10257
        selector:
          k8s-app: kube-controller-manager
      serviceMonitor:
        enabled: false
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      enabled: false
      endpoints: &cp
        - 192.168.0.100
        - 192.168.0.101
        - 192.168.0.102
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: false
        https: true
        insecureSkipVerify: true
    kubeProxy:
      enabled: false
      endpoints: *cp
    kubeEtcd:
      enabled: true
      endpoints: *cp
      service:
        enabled: false
        port: 2379
        targetPort: 2379
        selector:
          component: etcd
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Prometheus"
          hajimari.io/icon: "fire"
          hajimari.io/instance: "monitor"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: networking-authentik@kubernetescrd
        hosts:
          - &host "prometheus.mon.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - *host
            secretName: "prometheus-tls"
      thanosService:
        enabled: false
      thanosServiceMonitor:
        enabled: false
      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: __replica__
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        retention: 2d
        retentionSize: 15GB
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "ceph-block"
              resources:
                requests:
                  storage: 20Gi
        additionalScrapeConfigs:
          - job_name: node-exporter
            honor_timestamps: true
            static_configs:
              - targets:
                  - "192.168.0.1:9100"
        #   - job_name: pikvm
        #     metrics_path: /api/export/prometheus/metrics
        #     basic_auth:
        #       username: admin
        #       password: admin
        #     static_configs:
        #       - targets:
        #           - "pikvm.${SECRET_PRIVATE_DOMAIN}"
